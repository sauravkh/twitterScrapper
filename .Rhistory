exit
iris <- data(iris)
iris
?iris
iris <- data(Iris)
iris <- data(Titanic)
View(iris)
data(Titanic)
View(data(Titanic))
iris3
Titanic
iris3
data("iris")
lol <- data("iris")
lol
lol <- data("iris3")
lol
iris
data <- (iris)
data("iris")
data(iris)
View(iris)
datadata(iris)
data <- data(iris)
library(dplyr)
species <- "setosa"
one.species <- filter(iris, 5 == species)
one.species <- filter(iris, Species == species)
View(one.species)
View(one.species)
max.species <- summarise(one.species, max.sepal.width = max(Sepal.Width))
View(max.species)
View(max.species)
= max(Sepaal.Length) )
max.species <- summarise(one.species, max.sepal.width = max(Sepal.Width), max.sepal.length
= max(Sepaal.Length) )
max.species <- summarise(one.species, max.sepal.width = max(Sepal.Width), max.sepal.length
= max(Sepal.Length) )
View(max.species)
View(max.species)
max.species <- summarise(one.species, MaxSepalWidth = max(Sepal.Width), MaxSepalLength
= max(Sepal.Length), MaxPetalLength = max(Petal.Length), MaxPetalWidth = max(Petal.Width) )
View(max.species)
View(max.species)
average.species <- summarise(one.species, AverageSepalWidth = mean(Sepal.Width), AverageSepalLength
= mean(Sepal.Length), AveragePetalLength = mean(Petal.Length), AveragePetalWidth = mean(Petal.Width) )
View(average.species)
View(average.species)
min.species <- summarise(one.species, MinSepalWidth = min(Sepal.Width), MinSepalLength
= min(Sepal.Length), MinPetalLength = min(Petal.Length), MinPetalWidth = min(Petal.Width) )
View(min.species)
View(min.species)
summary(iris)
is.data.frame(one.species)
shiny::runApp('Documents/Courses/School/Info201/a8-data-app-sauravkh')
library(shiny)
my.server <- function(input, output) {
#pecies <- "setosa"
# one.species <- filter(iris, Species == species)
#output$table <- renderDataTable(iris)
# output$hello <- renderText({return("Hello")})
}
shinyServer(my.server)
library(shiny)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(  # specify content for the "sidebar" column
p("sidebar panel content goes here"), width = 4
),
mainPanel( tableOutput(table),
tabsetPanel(
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table")
),
#textOutput('hello')
#,
p("main panel content goes here"), width = 8
), position = "right"
)
)
shinyUI(my.ui)
library(shiny)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(  # specify content for the "sidebar" column
p("sidebar panel content goes here"), width = 4
),
mainPanel( tableOutput(table),
tabsetPanel(
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table")
),
#textOutput('hello')
#,
p("main panel content goes here"), width = 8
), position = "right"
)
)
shinyUI(my.ui)
library("shiny")
my.server <- function(input, output) {
#pecies <- "setosa"
# one.species <- filter(iris, Species == species)
#output$table <- renderDataTable(iris)
# output$hello <- renderText({return("Hello")})
}
shinyServer(my.server)
library("shiny")
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(  # specify content for the "sidebar" column
p("sidebar panel content goes here"), width = 4
),
mainPanel( tableOutput(table),
tabsetPanel(
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table")
),
#textOutput('hello')
#,
p("main panel content goes here"), width = 8
), position = "right"
)
)
shinyUI(my.ui)
library("shiny")
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(  # specify content for the "sidebar" column
p("sidebar panel content goes here"), width = 4
),
mainPanel(
tabsetPanel(
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table")
),
#textOutput('hello')
#,
p("main panel content goes here"), width = 8
), position = "right"
)
)
shinyUI(my.ui)
library("shiny")
my.server <- function(input, output) {
#pecies <- "setosa"
# one.species <- filter(iris, Species == species)
#output$table <- renderDataTable(iris)
# output$hello <- renderText({return("Hello")})
}
shinyServer(my.server)
library(twitteR)
consumer_key <- "j1cbBqw42lPoaZRSx3dj9KfTE"
consumer_secret <- "M1lnF1FVzcRy3fhpkw2LvIhkpp2JhILBzgjGHkTxTiaVJlwQoL"
access_token <- "835019765508788224-QAvxxTsImlQKLXDBZcRtfbMlFDxM7pM"
access_secret <- "6LaX7rgIMde1H55B3huYT3unThbqdaf420WPNaINlxqRe"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweets <- searchTwitter("210462857140252672")
library(twitteR)
consumer_key <- "aoQ1bAoMZ74pY5RsYcbKJzBUc"
consumer_secret <- "spidig71mvpnQbGOWOuBvQC8vq9wP8ax4eeV9FzjlypeHjenM9"
access_token <- "835019765508788224-WpZ2IPJgu1PKcA6w7rP628DPFystHsD"
access_secret <- "0JDPxoIQvcukZ8rqoFIDDssrxRkglWvCwdG2dtWT7D1Fu"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
?showStatus
please.run <- showStatus("440791078799548418")
please.run
?`status-class`
please.run <- showStatus("440791078799548418")
please.run
please.run <- showStatus("440791078799548418")
please.run
tweets <- searchTwitter("210462857140252672")
tweets
tweets.df <- twListToDF(tweets)
tweets <- searchTwitter("440791078799548418")
tweets.df <- twListToDF(tweets)
please.run <- showStatus("440791078799548418")
please.run
please.run <- showStatus("440560487919386625")
please.run
please.run <- showStatus("439325120666951680")
please.run
tweets <- searchTwitter("Wadia_RosJan: @samsung galaxy exprience zone ;)")
tweets
tweets[1]
tweets <- searchTwitter("jack")
tweets
please.run <- showStatus("439325120666951680")
please.run
tweets <- searchTwitter("Oye_Saqa_HD")
tweets
response <- GET("https://api.twitter.com/1.1/statuses/lookup.json?id=210462857140252672")
library("httr")
response <- GET("https://api.twitter.com/1.1/statuses/lookup.json?id=210462857140252672")
response
content(response)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweets <- searchTwitter("Oye_Saqa_HD")
tweets
tweets <- searchTwitter("439325120666951680")
please.run <- showStatus("439325120666951680")
please.run
tweets <- searchTwitter("Oye_Saqa_HD: Los disidentes intelectuales del 68: Paz y Krauze http://t.co/CSBOmzsMOF")
tweets <- searchTwitter("$Oye_Saqa_HD: Los disidentes intelectuales del 68: Paz y Krauze http://t.co/CSBOmzsMOF")
please.run <- showStatus("439325120666951680")
please.run
library(twitteR)
library("httr")
consumer_key <- "aoQ1bAoMZ74pY5RsYcbKJzBUc"
consumer_secret <- "spidig71mvpnQbGOWOuBvQC8vq9wP8ax4eeV9FzjlypeHjenM9"
access_token <- "835019765508788224-WpZ2IPJgu1PKcA6w7rP628DPFystHsD"
access_secret <- "0JDPxoIQvcukZ8rqoFIDDssrxRkglWvCwdG2dtWT7D1Fu"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
please.run <- showStatus("439325120666951680")
please.run
h <- lookup_statuses("298330946590105600","295232612983795713", "296247290056826881")
h <- lookup_statuses("298330946590105600","295232612983795713", "296247290056826881")
please.run <- showStatus("439325120666951680")
response <- GET("https://api.twitter.com/1.1/statuses/lookup.json?id=210462857140252672")
response
content(response)
h <- lookup_statuses("298330946590105600","295232612983795713", "296247290056826881")
please.run <- showStatus("439325120666951680")
h <- lookup_statuses(c("298330946590105600","295232612983795713", "296247290056826881"))
h
setwd("/Users/TheSauravKharb/Documents/Courses/Self/Twitter project/twitterScrapper/")
library(twitteR)
library("httr")
library("xlsx")
# set up OAuth
consumer_key <- "yTSkBX6a0UpY0YOntQFjewD0q"
consumer_secret <- "fqaOG7XsTnkiGqaLm6XjFLnLoFmWTtXYAcRyImnvRCtrxDGoeM"
access_token <- "835019765508788224-QAvxxTsImlQKLXDBZcRtfbMlFDxM7pM"
access_secret <- "6LaX7rgIMde1H55B3huYT3unThbqdaf420WPNaINlxqRe"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
oreo <- read.table("data/oreo.txt") #set appropriate path
i = 1
a <- unique(oreo)
for(i in 620493:640000) {
Sys.sleep(0.7)
tryCatch({
tweet <- showStatus(a[i,1])
data <- as.data.frame(tweet)
print(paste0("*********  ", i , "  **********"))
print(data)
name <- paste0("data/new/tweet_", i, ".xlsx")
write.xlsx(data, name)
rm(tweet,data)
}, error=function(e){
print("I AM DUMB AND I AM BEHAVING WEIRDLY")
})
}
oreo <- read.table("data/oreo.txt") #set appropriate path
a <- unique(oreo)
for(i in 620493:640000) {
Sys.sleep(0.7)
tryCatch({
tweet <- showStatus(a[i,1])
data <- as.data.frame(tweet)
print(paste0("*********  ", i , "  **********"))
print(data)
name <- paste0("data/new/tweet_", i, ".xlsx")
write.xlsx(data, name)
rm(tweet,data)
}, error=function(e){
print("I AM DUMB AND I AM BEHAVING WEIRDLY")
})
}
DF <- read.xlsx("data/new/tweet_130895.xlsx",1)
DF
temp = list.files(path="data/new",pattern="*.xlsx")
length(temp)
for(i in temp) {
currentDF <- read.xlsx(paste0("data/new", i),1)
DF <- rbind(DF, currentDF)
}
for(i in temp) {
currentDF <- read.xlsx(paste0("data/new/", i),1)
DF <- rbind(DF, currentDF)
}
View(DF)
View(DF)
write.csv(DF,"data/ihavenoidea_162024.csv")
for(i in temp) {
currentDF <- read.xlsx(paste0("data/new/leftover/", i),1)
DF <- rbind(DF, currentDF)
}
DF <- read.xlsx("data/new/leftover/tweet_567130.xlsx",1)
for(i in temp) {
currentDF <- read.xlsx(paste0("data/new/leftover/", i),1)
DF <- rbind(DF, currentDF)
}
temp = list.files(path="data/new/leftover",pattern="*.xlsx")
for(i in temp) {
currentDF <- read.xlsx(paste0("data/new/leftover/", i),1)
DF <- rbind(DF, currentDF)
}
write.csv(DF,"data/lastHalf.csv")
write.csv(DF,"data/merged/lastHalf.csv")
getwd()
first <- read.csv("data/merged/89215TWEETS.csv")
second <- read.csv("data.merged/lastpeices.csv")
second <- read.csv("data/merged/lastpeices.csv")
join <- rbind(first,second)
View(first)
View(first)
View(second)
View(second)
second$X.1 <- NULL
View(second)
View(second)
join <- rbind(first,second)
write.csv(join,"135655.csv")
?showStatus
listOf10 <- oreo[1,1]
listOf10
listOf10 <- oreo[1,1]
for(i in 1:10) {
listOf10 <- c(listOf10,1)
}
listOf10
listOf10 <- oreo[1,1]
for(i in 1:10) {
listOf10 <- c(listOf10,oreo[i,1])
}
listOf10
listOf10 <- oreo[1,1]
for(i in 1:10) {
listOf10 <- c(listOf10,oreo[i,1])
print(oreo[i,1])
}
oreo[i,1]
factor(oreo[i,1])
droplevels(oreo[1,1])
listOf10 <- oreo[1,1]
for(i in 1:10) {
listOf10 <- c(listOf10,droplevels(oreo[1,1]))
print(oreo[i,1])
}
for(i in 1:10) {
print(oreo[i,1])
}
for(i in 1:10) {
print(a[i,1])
}
View(a)
View(a)
a$V1[1]
a[[1]]
a[[1]][1]
listOf10 <- oreo[1,1]
for(i in 1:10) {
listOf10 <- c(listOf10,droplevels(oreo[1,1]))
}
listOf10
listOf10 <- oreo[1,1]
for(i in 1:10) {
listOf10 <- c(listOf10,droplevels(oreo[i,1]))
}
listOf10
typeof(a)
typeof(oreo)
b
big.data <- showStatus(a[1,1])
big.data <- as.data.frame(big.data)
start.from = 1
while(start.from < 41){
# for every 10 from selected id's
for(repeat in 1:10){
list.of.ids <- a[start.from,1] # first id
# to get 10 id's
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
# call api
raw.api.data <- lookup_statuses(list.of.ids)
current.dataframe <- as.data.frame(raw.api.data[[1]])
for(i in 2:length(raw.api.data)){
current.dataframe <- rbind(current.dataframe, as.data.frame(raw.api.data[[i]]))
}
}
big.data <- rbind(big.data, current.dataframe)
start.from = start.from + 10;
}
consumer_key <- "QHJgBeTm2KW5yyKu5jwzFxioT"
consumer_secret <- "TEvaRBKUaTM41lFzsiiclO7bIUHBZrarPsRPdL647ACMPO6uZe"
access_token <- "835019765508788224-HUGrNbQLek454Mwf6NBLJNRIxPYwFsI"
access_secret <- "xNzEIhcuO1WaV5hKGQItIhtCHLLbmAMHg5Y9Jy8S4zJfk"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
library(twitteR)
library(httr)
library(xlsx)
consumer_key <- "QHJgBeTm2KW5yyKu5jwzFxioT"
consumer_secret <- "TEvaRBKUaTM41lFzsiiclO7bIUHBZrarPsRPdL647ACMPO6uZe"
access_token <- "835019765508788224-HUGrNbQLek454Mwf6NBLJNRIxPYwFsI"
access_secret <- "xNzEIhcuO1WaV5hKGQItIhtCHLLbmAMHg5Y9Jy8S4zJfk"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
big.data <- showStatus(a[1,1])
big.data <- as.data.frame(big.data)
start.from = 1
while(start.from < 41){
# for every 10 from selected id's
for(repeat in 1:10){
list.of.ids <- a[start.from,1] # first id
# to get 10 id's
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
# call api
raw.api.data <- lookup_statuses(list.of.ids)
current.dataframe <- as.data.frame(raw.api.data[[1]])
for(i in 2:length(raw.api.data)){
current.dataframe <- rbind(current.dataframe, as.data.frame(raw.api.data[[i]]))
}
}
big.data <- rbind(big.data, current.dataframe)
start.from = start.from + 10;
}
start.from = 1
list.of.ids <- a[start.from,1] # first id
# to get 10 id's
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
list.of.ids
a[1,1]
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
list.of.ids
list.of.ids[1]
list.of.ids[2]
big.data <- showStatus(a[1,1])
big.data
big.data <- as.data.frame(big.data)
big.data
start.from = 1
list.of.ids <- a[start.from,1] # first id
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
list.of.ids
list.of.ids <- a[start.from,1] # first id
list.of.ids
a[start.from + id.number,1]
oreo <- read.table("data/oreo.txt", stringsAsFactors = FALSE)
a <- unique(oreo)
a[start.from + id.number,1]
big.data <- showStatus(a[1,1])
big.data <- as.data.frame(big.data)
start.from = 1
list.of.ids <- a[start.from,1] # first id
list.of.ids
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
raw.api.data <- lookup_statuses(list.of.ids)
current.dataframe <- as.data.frame(raw.api.data[[1]])
for(i in 2:length(raw.api.data)){
current.dataframe <- rbind(current.dataframe, as.data.frame(raw.api.data[[i]]))
}
big.data <- rbind(big.data, current.dataframe)
start.from = start.from + 10;
big.data
big.data <- showStatus(a[1,1])
big.data <- as.data.frame(big.data)
start.from = 1
while(start.from < 41){
# for every 10 from selected id's
for(repeat in 1:10){
list.of.ids <- a[start.from,1] # first id
# to get 10 id's
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
# call api
raw.api.data <- lookup_statuses(list.of.ids)
current.dataframe <- as.data.frame(raw.api.data[[1]])
for(i in 2:length(raw.api.data)){
current.dataframe <- rbind(current.dataframe, as.data.frame(raw.api.data[[i]]))
}
}
big.data <- rbind(big.data, current.dataframe)
start.from = start.from + 10;
}
big.data <- showStatus(a[1,1])
big.data <- as.data.frame(big.data)
start.from = 1
while(start.from < 41) {
# for every 10 from selected id's
for(repeat.calls in 1:10){
list.of.ids <- a[start.from,1] # first id
# to get 10 id's
for(id.number in 1:9){
list.of.ids <- c(list.of.ids, a[start.from + id.number,1]) # rest 8
}
# call api
raw.api.data <- lookup_statuses(list.of.ids)
current.dataframe <- as.data.frame(raw.api.data[[1]])
for(i in 2:length(raw.api.data)){
current.dataframe <- rbind(current.dataframe, as.data.frame(raw.api.data[[i]]))
}
}
big.data <- rbind(big.data, current.dataframe)
start.from = start.from + 10;
}
View(big.data)
